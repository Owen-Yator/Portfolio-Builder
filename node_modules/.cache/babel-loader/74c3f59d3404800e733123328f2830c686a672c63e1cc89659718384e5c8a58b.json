{"ast":null,"code":"import { apiService } from './api';\nclass AuthService {\n  constructor() {\n    this.authState = {\n      user: null,\n      isAuthenticated: false,\n      isLoading: true\n    };\n    this.listeners = [];\n    this.initializeAuth();\n  }\n  async initializeAuth() {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      try {\n        const response = await apiService.getCurrentUser();\n        this.setAuthState({\n          user: response.data,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      } catch (error) {\n        // Token is invalid or expired\n        localStorage.removeItem('authToken');\n        this.setAuthState({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false\n        });\n      }\n    } else {\n      this.setAuthState({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      });\n    }\n  }\n  setAuthState(newState) {\n    this.authState = {\n      ...this.authState,\n      ...newState\n    };\n    this.notifyListeners();\n  }\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.authState));\n  }\n  subscribe(listener) {\n    this.listeners.push(listener);\n    // Return unsubscribe function\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n  getAuthState() {\n    return this.authState;\n  }\n  async login(credentials) {\n    try {\n      this.setAuthState({\n        isLoading: true\n      });\n      const response = await apiService.login(credentials.email, credentials.password);\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.setItem('authToken', token);\n      this.setAuthState({\n        user,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      this.setAuthState({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      });\n      throw error;\n    }\n  }\n  async signup(signUpData) {\n    try {\n      this.setAuthState({\n        isLoading: true\n      });\n      const response = await apiService.signup(signUpData.name, signUpData.email, signUpData.password);\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.setItem('authToken', token);\n      this.setAuthState({\n        user,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      this.setAuthState({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      });\n      throw error;\n    }\n  }\n  async logout() {\n    try {\n      await apiService.logout();\n    } catch (error) {\n      // Log error but continue with logout\n      console.error('Logout API call failed:', error);\n    } finally {\n      localStorage.removeItem('authToken');\n      this.setAuthState({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      });\n    }\n  }\n  async updateProfile(data) {\n    try {\n      const response = await apiService.updateProfile(data);\n      const updatedUser = response.data;\n      this.setAuthState({\n        user: updatedUser\n      });\n      return updatedUser;\n    } catch (error) {\n      throw error;\n    }\n  }\n  isAuthenticated() {\n    return this.authState.isAuthenticated;\n  }\n  getCurrentUser() {\n    return this.authState.user;\n  }\n  isLoading() {\n    return this.authState.isLoading;\n  }\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n\n  // Helper method for checking if user has specific permissions\n  hasPermission(permission) {\n    // Implement permission checking logic based on your requirements\n    return this.authState.isAuthenticated;\n  }\n\n  // Helper method for checking if user can access a resource\n  canAccessResource(resourceUserId) {\n    var _this$authState$user;\n    return ((_this$authState$user = this.authState.user) === null || _this$authState$user === void 0 ? void 0 : _this$authState$user.id) === resourceUserId;\n  }\n}\nexport const authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["apiService","AuthService","constructor","authState","user","isAuthenticated","isLoading","listeners","initializeAuth","token","localStorage","getItem","response","getCurrentUser","setAuthState","data","error","removeItem","newState","notifyListeners","forEach","listener","subscribe","push","filter","l","getAuthState","login","credentials","email","password","setItem","signup","signUpData","name","logout","console","updateProfile","updatedUser","getToken","hasPermission","permission","canAccessResource","resourceUserId","_this$authState$user","id","authService"],"sources":["C:/Users/user/Desktop/PORTFOLIO BUILDER/src/services/auth.ts"],"sourcesContent":["import { User, LoginCredentials, SignUpData, AuthState } from '../types';\r\nimport { apiService } from './api';\r\n\r\nclass AuthService {\r\n  private authState: AuthState = {\r\n    user: null,\r\n    isAuthenticated: false,\r\n    isLoading: true\r\n  };\r\n\r\n  private listeners: ((state: AuthState) => void)[] = [];\r\n\r\n  constructor() {\r\n    this.initializeAuth();\r\n  }\r\n\r\n  private async initializeAuth() {\r\n    const token = localStorage.getItem('authToken');\r\n    \r\n    if (token) {\r\n      try {\r\n        const response = await apiService.getCurrentUser();\r\n        this.setAuthState({\r\n          user: response.data,\r\n          isAuthenticated: true,\r\n          isLoading: false\r\n        });\r\n      } catch (error) {\r\n        // Token is invalid or expired\r\n        localStorage.removeItem('authToken');\r\n        this.setAuthState({\r\n          user: null,\r\n          isAuthenticated: false,\r\n          isLoading: false\r\n        });\r\n      }\r\n    } else {\r\n      this.setAuthState({\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  private setAuthState(newState: Partial<AuthState>) {\r\n    this.authState = { ...this.authState, ...newState };\r\n    this.notifyListeners();\r\n  }\r\n\r\n  private notifyListeners() {\r\n    this.listeners.forEach(listener => listener(this.authState));\r\n  }\r\n\r\n  subscribe(listener: (state: AuthState) => void) {\r\n    this.listeners.push(listener);\r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.listeners = this.listeners.filter(l => l !== listener);\r\n    };\r\n  }\r\n\r\n  getAuthState(): AuthState {\r\n    return this.authState;\r\n  }\r\n\r\n  async login(credentials: LoginCredentials): Promise<void> {\r\n    try {\r\n      this.setAuthState({ isLoading: true });\r\n      \r\n      const response = await apiService.login(credentials.email, credentials.password);\r\n      const { user, token } = response.data;\r\n\r\n      localStorage.setItem('authToken', token);\r\n      \r\n      this.setAuthState({\r\n        user,\r\n        isAuthenticated: true,\r\n        isLoading: false\r\n      });\r\n    } catch (error) {\r\n      this.setAuthState({\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async signup(signUpData: SignUpData): Promise<void> {\r\n    try {\r\n      this.setAuthState({ isLoading: true });\r\n      \r\n      const response = await apiService.signup(\r\n        signUpData.name,\r\n        signUpData.email,\r\n        signUpData.password\r\n      );\r\n      const { user, token } = response.data;\r\n\r\n      localStorage.setItem('authToken', token);\r\n      \r\n      this.setAuthState({\r\n        user,\r\n        isAuthenticated: true,\r\n        isLoading: false\r\n      });\r\n    } catch (error) {\r\n      this.setAuthState({\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    try {\r\n      await apiService.logout();\r\n    } catch (error) {\r\n      // Log error but continue with logout\r\n      console.error('Logout API call failed:', error);\r\n    } finally {\r\n      localStorage.removeItem('authToken');\r\n      this.setAuthState({\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  async updateProfile(data: Partial<User>): Promise<User> {\r\n    try {\r\n      const response = await apiService.updateProfile(data);\r\n      const updatedUser = response.data;\r\n      \r\n      this.setAuthState({\r\n        user: updatedUser\r\n      });\r\n      \r\n      return updatedUser;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.authState.isAuthenticated;\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.authState.user;\r\n  }\r\n\r\n  isLoading(): boolean {\r\n    return this.authState.isLoading;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('authToken');\r\n  }\r\n\r\n  // Helper method for checking if user has specific permissions\r\n  hasPermission(permission: string): boolean {\r\n    // Implement permission checking logic based on your requirements\r\n    return this.authState.isAuthenticated;\r\n  }\r\n\r\n  // Helper method for checking if user can access a resource\r\n  canAccessResource(resourceUserId: string): boolean {\r\n    return this.authState.user?.id === resourceUserId;\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();\r\nexport default authService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}